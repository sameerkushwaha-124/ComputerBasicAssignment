Q1: Sum of Elements at Even Indices

public class SumEvenIndices {
    public static void main(String[] args) {
        int[] arr1 = {3, 20, 4, 6, 9};
        int[] arr2 = {4, 3, 6, 7, 1};

        System.out.println("Output 1: " + sumEvenIndices(arr1)); // Output: 16
        System.out.println("Output 2: " + sumEvenIndices(arr2)); // Output: 11
    }

    public static int sumEvenIndices(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i += 2) {
            sum += arr[i];
        }
        return sum;
    }
}
Q2: Traverse and Print Even Elements

public class TraverseEvenElements {
    public static void main(String[] args) {
        int[] arr1 = {34, 21, 54, 65, 43};
        int[] arr2 = {4, 3, 6, 7, 1};

        System.out.print("Output 1: ");
        printEvenElements(arr1); // Output: 34 54
        System.out.print("Output 2: ");
        printEvenElements(arr2); // Output: 4 6
    }

    public static void printEvenElements(int[] arr) {
        for (int num : arr) {
            if (num % 2 == 0) {
                System.out.print(num + " ");
            }
        }
        System.out.println();
    }
}
Q3: Calculate Maximum Element

public class MaxElement {
    public static void main(String[] args) {
        int[] arr1 = {34, 21, 54, 65, 43};
        int[] arr2 = {4, 3, 6, 7, 1};

        System.out.println("Output 1: " + maxElement(arr1)); // Output: 65
        System.out.println("Output 2: " + maxElement(arr2)); // Output: 7
    }

    public static int maxElement(int[] arr) {
        int max = arr[0];
        for (int num : arr) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }
}
Q4: Find Second Largest Element

public class SecondLargestElement {
    public static void main(String[] args) {
        int[] arr1 = {34, 21, 54, 65, 43};
        int[] arr2 = {4, 3, 6, 7, 1};

        System.out.println("Output 1: " + secondLargestElement(arr1)); // Output: 54
        System.out.println("Output 2: " + secondLargestElement(arr2)); // Output: 6
    }

    public static int secondLargestElement(int[] arr) {
        int first = Integer.MIN_VALUE;
        int second = Integer.MIN_VALUE;

        for (int num : arr) {
            if (num > first) {
                second = first;
                first = num;
            } else if (num > second && num != first) {
                second = num;
            }
        }
        return second;
    }
}
Q5: Find First Peak Element

public class FirstPeakElement {
    public static void main(String[] args) {
        int[] arr1 = {1, 3, 2, 6, 5};
        int[] arr2 = {1, 4, 7, 3, 2, 6, 5};

        System.out.println("Output 1: " + findPeakElement(arr1)); // Output: 6
        System.out.println("Output 2: " + findPeakElement(arr2)); // Output: 7
    }

    public static int findPeakElement(int[] arr) {
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                return arr[i];
            }
        }
        return -1; // No peak found
    }
}
...........................................................................
Q1: Matrix Analysis for Positive, Negative, Odd, Even, and Zero Count

import java.util.Scanner;

public class MatrixAnalysis {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the number of rows (m): ");
        int m = sc.nextInt();
        
        System.out.print("Enter the number of columns (n): ");
        int n = sc.nextInt();
        
        int[][] matrix = new int[m][n];
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
        
        int positiveCount = 0;
        int negativeCount = 0;
        int oddCount = 0;
        int evenCount = 0;
        int zeroCount = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int num = matrix[i][j];
                if (num > 0) positiveCount++;
                if (num < 0) negativeCount++;
                if (num == 0) zeroCount++;
                if (num % 2 == 0) evenCount++;
                if (num % 2 != 0) oddCount++;
            }
        }
        
        System.out.println("Number of positive numbers = " + positiveCount);
        System.out.println("Number of negative numbers = " + negativeCount);
        System.out.println("Number of odd numbers = " + oddCount);
        System.out.println("Number of even numbers = " + evenCount);
        System.out.println("Number of 0 = " + zeroCount);
    }
}
Q2: Elements Above the Secondary Diagonal in a Square Matrix

import java.util.Scanner;

public class SecondaryDiagonalElements {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of the square matrix (n): ");
        int n = sc.nextInt();

        int[][] matrix = new int[n][n];
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        System.out.print("Elements above the secondary diagonal: ");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                System.out.print(matrix[i][j] + " ");
            }
        }
    }
}
Q3: Elements of Both Diagonals in a Square Matrix

import java.util.Scanner;

public class BothDiagonalsElements {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of the square matrix (n): ");
        int n = sc.nextInt();

        int[][] matrix = new int[n][n];
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        System.out.print("Elements of both diagonals: ");
        for (int i = 0; i < n; i++) {
            System.out.print(matrix[i][i] + " "); // Primary diagonal
            if (i != n - i - 1) {
                System.out.print(matrix[i][n - i - 1] + " "); // Secondary diagonal
            }
        }
    }
}
Q4: Find the Largest Element in a 2D Array

import java.util.Scanner;

public class LargestElementIn2DArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of rows: ");
        int m = sc.nextInt();
        
        System.out.print("Enter the number of columns: ");
        int n = sc.nextInt();
        
        int[][] matrix = new int[m][n];
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        int maxElement = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] > maxElement) {
                    maxElement = matrix[i][j];
                }
            }
        }

        System.out.println("The largest element in the matrix is: " + maxElement);
    }
}
Q5: Display Elements of Middle Row and Column in an Odd-Dimensioned Square Matrix

import java.util.Scanner;

public class MiddleRowAndColumn {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the size of the square matrix (odd number): ");
        int n = sc.nextInt();

        int[][] matrix = new int[n][n];
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        int middleIndex = n / 2;

        System.out.print("Middle row elements: ");
        for (int j = 0; j < n; j++) {
            System.out.print(matrix[middleIndex][j] + " ");
        }

        System.out.print("\nMiddle column elements: ");
        for (int i = 0; i < n; i++) {
            System.out.print(matrix[i][middleIndex] + " ");
        }
    }
}
..............................................................................................

Question 1: Time Complexity Analysis and Improvement
Given Java Code:
java
Copy code
public class Example {
    public static void main(String[] args) {
        int n = 1000;
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                sum += j;
            }
        }
        System.out.println(sum);
    }
}
Time Complexity Analysis:
The code has a nested loop structure. The outer loop runs from 1 to n (i.e., n iterations). The inner loop runs from 1 to i for each iteration of the outer loop. This results in the following number of operations:

For i = 1, inner loop runs 1 time.
For i = 2, inner loop runs 2 times.
For i = 3, inner loop runs 3 times.
...
For i = n, inner loop runs n times.
Thus, the total number of operations is:
​
 i=1+2+3+...+n= 
2
n(n+1)
​
 

The time complexity is therefore 


Suggestion to Improve:
We can calculate the sum in 

O(n) time by using the formula for the sum of the first n natural numbers directly.

Improved Code:
java
Copy code
public class Example {
    public static void main(String[] args) {
        int n = 1000;
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += (i * (i + 1)) / 2;
        }
        System.out.println(sum);
    }
}
Question 2: Find 

T(2) for the Recurrence Relation 

T(n)=3T(n−1)+12n
Given: 

T(n)=3T(n−1)+12n and 

T(0)=5.

We need to find 

T(2):


T(1)=3T(0)+12×1=3×5+12=15+12=27

T(2)=3T(1)+12×2=3×27+24=81+24=105

T(2)=105.

Question 3: Solve the Recurrence Relation 

T(n)=T(n−1)+c Using Substitution Method
We solve this by repeatedly substituting 
T(n−1):

T(n)=T(n−1)+c

T(n−1)=T(n−2)+c

T(n−2)=T(n−3)+c

T(1)=T(0)+c

Summing these, we get:

T(n)=T(0)+c+c+c+⋯+c

T(n)=T(0)+cn


T(0)=k, then 

T(n)=k+cn.

Question 4: Use Master Theorem for 

T(n)=16T(n/4)+n 

Master Theorem applies to recurrences of the form 

T(n)=aT(n/b)+f(n).

f(n)=n 

f(n)=n 


f(n) grows faster than 

 , we use Case 3 of the Master Theorem:

T(n)=Θ(f(n))=Θ(n 

So, the time complexity is 

 logn).

Question 5: Solve 

T(n)=2T(n/2)+n Using Recursion Tree Method
The recursion tree method involves visualizing the recurrence as a tree and summing the work done at each level.

Each level of the tree has a total cost:


The depth of the tree is 

logn. Each level has 
𝑛
n work, so the total work is:


𝑛
T(n)=nlogn

So, the time complexity is 

Θ(nlogn).

Question 6: Solve 

T(n)=2T(n/2)+K Using Recurrence Tree Method
Here, 
𝐾
K is a constant.
Level 1: 

2×K=2K

logn ×K=nK
Summing the geometric series:


T(n)=K(1+2+4+...+n)=K(2logn+1−1)

T(n)=K(2n−1)

So, the time complexity is 
Θ
(
𝑛
)
Θ(n).
