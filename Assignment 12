1. What do you mean by Multithreading? Why is it important?
Multithreading in Java refers to the capability of a CPU (or a single core in a multi-core system) to provide multiple threads of execution concurrently. This is one of the most important features of Java. Each thread is a separate path of execution, and multithreading enables simultaneous execution of two or more threads to utilize the CPU to its maximum potential.

Importance of Multithreading:

Efficient CPU Utilization: By allowing multiple threads to run concurrently, it ensures that CPU time is used efficiently.
Improved Performance: Especially for tasks that can be executed independently.
Concurrent Execution: Allows the subdivision of a specific program into two or more threads, making the program faster and easier to manage.
2. What are the benefits of using Multithreading?
The benefits of using multithreading include:

Continuous Program Execution: Allows the program to run even if a part of it is blocked.
Improved Performance: Better performance compared to traditional parallel programming that uses multiple processes.
Efficient CPU Utilization: Write effective programs that utilize maximum CPU time.
Improved Responsiveness: In complex applications, it enhances responsiveness.
Resource Optimization: Increased use of CPU resources reduces maintenance costs.
Time Savings and Parallel Tasks: Saves time by performing tasks in parallel.
Independent Threads: Exceptions in one thread do not affect other threads, ensuring stability.
Less Resource-Intensive: More efficient than executing multiple processes simultaneously.
3. What is Thread in Java?
A Thread in Java is the smallest unit of a process that can be scheduled for execution. Threads allow a program to operate more efficiently by performing multiple tasks simultaneously. They share the common address space and are independent of each other.

4. What are the two ways of implementing thread in Java?
There are two primary ways to implement threads in Java:

Extending the Thread class:

class MultithreadingDemo extends Thread {
    public void run() {
        System.out.println("My thread is in running state.");
    }

    public static void main(String args[]) {
        MultithreadingDemo obj = new MultithreadingDemo();
        obj.start();
    }
}
Implementing Runnable interface:

class MultithreadingDemo implements Runnable {
    public void run() {
        System.out.println("My thread is in running state.");
    }

    public static void main(String args[]) {
        MultithreadingDemo obj = new MultithreadingDemo();
        Thread t = new Thread(obj);
        t.start();
    }
}
5. What's the difference between thread and process?
Thread: The smallest unit of a particular process that can be executed independently. Multiple threads within the same process share the same memory space.
Process: An instance of a program in execution. A process can have multiple threads. It is managed using a Process Control Block (PCB) and has its own memory space.
6. How can we create daemon threads?
Daemon threads in Java can be created using the setDaemon(true) method of the Thread class. A daemon thread runs in the background and does not prevent the JVM from exiting when the program finishes.

Example:

class DaemonThread extends Thread {
    public DaemonThread(String name) {
        super(name);
    }

    public void run() {
        if (Thread.currentThread().isDaemon()) {
            System.out.println(getName() + " is Daemon thread");
        } else {
            System.out.println(getName() + " is User thread");
        }
    }

    public static void main(String[] args) {
        DaemonThread t1 = new DaemonThread("t1");
        DaemonThread t2 = new DaemonThread("t2");
        DaemonThread t3 = new DaemonThread("t3");

        t1.setDaemon(true);  // Setting t1 as a daemon thread
        t1.start();
        t2.start();
        t3.setDaemon(true);  // Setting t3 as a daemon thread
        t3.start();
    }
}
Output:

t1 is Daemon thread
t2 is User thread
t3 is Daemon thread
7. What are the wait() and sleep() methods?
wait(): A non-static method that causes the current thread to wait until another thread invokes notify() or notifyAll() on the object's monitor (lock). It releases the lock on the object.
Example:


synchronized (monitor) {
    monitor.wait();  // Lock is released by the current thread
}
sleep(): A static method that pauses the execution of the current thread for a specified period. It does not release the lock while waiting.
Example:

synchronized (monitor) {
    Thread.sleep(1000);  // Lock is held by the current thread
    // After 1000 milliseconds, the current thread will wake up
}
